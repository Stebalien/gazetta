initSidebarItems({"fn":[["random","Generates a random value using the thread-local random number generator.`random()` can generate various types of random things, and so may require type hinting to generate the specific type you want.This function uses the thread local random number generator. This means that if you're calling `random()` in a loop, caching the generator can increase performance. An example is shown below.ExamplesCaching the thread local random number generator:"],["sample","Randomly sample up to `amount` elements from an iterator.Example"],["thread_rng","Retrieve the lazily-initialized thread-local random number generator, seeded by the system. Intended to be used in method chaining style, e.g. `thread_rng().gen::<i32>()`.The RNG provided will reseed itself from the operating system after generating a certain amount of randomness.The internal RNG used is platform and architecture dependent, even if the operating system random number generator is rigged to give the same sequence always. If absolute consistency is required, explicitly select an RNG, e.g. `IsaacRng` or `Isaac64Rng`."],["weak_rng","Create a weak random number generator with a default algorithm and seed.It returns the fastest `Rng` algorithm currently available in Rust without consideration for cryptography or security. If you require a specifically seeded `Rng` for consistency over time you should pick one algorithm and create the `Rng` yourself.This will read randomness from the operating system to seed the generator."]],"mod":[["chacha","The ChaCha random number generator."],["distributions","Sampling from random distributions.This is a generalization of `Rand` to allow parameters to control the exact properties of the generated values, e.g. the mean and standard deviation of a normal distribution. The `Sample` trait is the most general, and allows for generating values that change some state internally. The `IndependentSample` trait is for generating values that do not need to record state."],["isaac","The ISAAC random number generator."],["os","Interfaces to the operating system provided random number generators."],["read","A wrapper around any Read to treat it as an RNG."],["reseeding","A wrapper around another RNG that reseeds it after it generates a certain number of random bytes."]],"struct":[["AsciiGenerator","Iterator which will continuously generate random ascii characters.This iterator is created via the `gen_ascii_chars` method on `Rng`."],["Closed01","A wrapper for generating floating point numbers uniformly in the closed interval `[0,1]` (including both endpoints).Use `Open01` for the closed interval `(0,1)`, and the default `Rand` implementation of `f32` and `f64` for the half-open `[0,1)`.Example"],["Generator","Iterator which will generate a stream of random items.This iterator is created via the `gen_iter` method on `Rng`."],["Open01","A wrapper for generating floating point numbers uniformly in the open interval `(0,1)` (not including either endpoint).Use `Closed01` for the closed interval `[0,1]`, and the default `Rand` implementation for `f32` and `f64` for the half-open `[0,1)`.Example"],["StdRng","The standard RNG. This is designed to be efficient on the current platform."],["ThreadRng","The thread-local RNG."],["XorShiftRng","An Xorshift[1] random number generator.The Xorshift algorithm is not suitable for cryptographic purposes but is very fast. If you do not know for sure that it fits your requirements, use a more secure one such as `IsaacRng` or `OsRng`.[1]: Marsaglia, George (July 2003). \"Xorshift RNGs\". *Journal of Statistical Software*. Vol. 8 (Issue 14)."]],"trait":[["Rand","A type that can be randomly generated using an `Rng`."],["Rng","A random number generator."],["SeedableRng","A random number generator that can be explicitly seeded to produce the same stream of randomness multiple times."]]});