initSidebarItems({"enum":[["BorrowState","An enumeration of values returned from the `state` method on a `RefCell<T>`."]],"struct":[["Cell","A mutable memory location that admits only `Copy` data.See the module-level documentation for more."],["Ref","Wraps a borrowed reference to a value in a `RefCell` box. A wrapper type for an immutably borrowed value from a `RefCell<T>`.See the module-level documentation for more."],["RefCell","A mutable memory location with dynamically checked borrow rulesSee the module-level documentation for more."],["RefMut","A wrapper type for a mutably borrowed value from a `RefCell<T>`.See the module-level documentation for more."],["UnsafeCell","The core primitive for interior mutability in Rust.`UnsafeCell<T>` is a type that wraps some `T` and indicates unsafe interior operations on the wrapped type. Types with an `UnsafeCell<T>` field are considered to have an 'unsafe interior'. The `UnsafeCell<T>` type is the only legal way to obtain aliasable data that is considered mutable. In general, transmuting an `&T` type into an `&mut T` is considered undefined behavior.Types like `Cell<T>` and `RefCell<T>` use this type to wrap their internal data.Examples"]]});