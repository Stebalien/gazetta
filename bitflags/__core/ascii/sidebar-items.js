initSidebarItems({"fn":[["escape_default","Returns an iterator that produces an escaped version of a `u8`.The default is chosen with a bias toward producing literals that are legal in a variety of languages, including C++11 and similar C-family languages. The exact rules are:Tab, CR and LF are escaped as '\\t', '\\r' and '\\n' respectively. Single-quote, double-quote and backslash chars are backslash-escaped. Any other chars in the range [0x20,0x7e] are not escaped. Any other chars are given hex escapes of the form '\\xNN'. Unicode escapes are never generated by this function. Examples"]],"struct":[["EscapeDefault","An iterator over the escaped version of a byte, constructed via `std::ascii::escape_default`."]],"trait":[["AsciiExt","Extension methods for ASCII-subset only operations on string slices.Be aware that operations on seemingly non-ASCII characters can sometimes have unexpected results. Consider this example:In the first example, the lowercased string is represented `\"cafe\\u{301}\"` (the last character is an acute accent combining character). Unlike the other characters in the string, the combining character will not get mapped to an uppercase variant, resulting in `\"CAFE\\u{301}\"`. In the second example, the lowercased string is represented `\"caf\\u{e9}\"` (the last character is a single Unicode character representing an 'e' with an acute accent). Since the last character is defined outside the scope of ASCII, it will not get mapped to an uppercase variant, resulting in `\"CAF\\u{e9}\"`."]]});