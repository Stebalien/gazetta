initSidebarItems({"fn":[["canonicalize","Returns the canonical form of a path with all intermediate components normalized and symbolic links resolved.Platform-specific behaviorThis function currently corresponds to the `realpath` function on Unix and the `CreateFile` and `GetFinalPathNameByHandle` functions on Windows. Note that, this may change in the future.ErrorsThis function will return an error in the following situations, but is not limited to just these cases:`path` does not exist. A component in path is not a directory. Examples"],["copy","Copies the contents of one file to another. This function will also copy the permission bits of the original file to the destination file.This function will **overwrite** the contents of `to`.Note that if `from` and `to` both point to the same file, then the file will likely get truncated by this operation.On success, the total number of bytes copied is returned.Platform-specific behaviorThis function currently corresponds to the `open` function in Unix with `O_RDONLY` for `from` and `O_WRONLY`, `O_CREAT`, and `O_TRUNC` for `to`. `O_CLOEXEC` is set for returned file descriptors. On Windows, this function currently corresponds to `CopyFileEx`. Note that, this may change in the future.ErrorsThis function will return an error in the following situations, but is not limited to just these cases:The `from` path is not a file. The `from` file does not exist. The current process does not have the permission rights to access `from` or write `to`. Examples"],["create_dir","Creates a new, empty directory at the provided pathPlatform-specific behaviorThis function currently corresponds to the `mkdir` function on Unix and the `CreateDirectory` function on Windows. Note that, this may change in the future.ErrorsThis function will return an error in the following situations, but is not limited to just these cases:User lacks permissions to create directory at `path`. `path` already exists. Examples"],["create_dir_all","Recursively create a directory and all of its parent components if they are missing.Platform-specific behaviorThis function currently corresponds to the `mkdir` function on Unix and the `CreateDirectory` function on Windows. Note that, this may change in the future.ErrorsThis function will return an error in the following situations, but is not limited to just these cases:If any directory in the path specified by `path` does not already exist and it could not be created otherwise. The specific error conditions for when a directory is being created (after it is determined to not exist) are outlined by `fs::create_dir`. Examples"],["hard_link","Creates a new hard link on the filesystem.The `dst` path will be a link pointing to the `src` path. Note that systems often require these two paths to both be located on the same filesystem.Platform-specific behaviorThis function currently corresponds to the `link` function on Unix and the `CreateHardLink` function on Windows. Note that, this may change in the future.ErrorsThis function will return an error in the following situations, but is not limited to just these cases:The `src` path is not a file or doesn't exist. Examples"],["metadata","Given a path, query the file system to get information about a file, directory, etc.This function will traverse symbolic links to query information about the destination file.Platform-specific behaviorThis function currently corresponds to the `stat` function on Unix and the `GetFileAttributesEx` function on Windows. Note that, this may change in the future.ErrorsThis function will return an error in the following situations, but is not limited to just these cases:The user lacks permissions to perform `metadata` call on `path`. `path` does not exist. Examples"],["read_dir","Returns an iterator over the entries within a directory.The iterator will yield instances of `io::Result<DirEntry>`. New errors may be encountered after an iterator is initially constructed.Platform-specific behaviorThis function currently corresponds to the `opendir` function on Unix and the `FindFirstFile` function on Windows. Note that, this may change in the future.ErrorsThis function will return an error in the following situations, but is not limited to just these cases:The provided `path` doesn't exist. The process lacks permissions to view the contents. The `path` points at a non-directory file. Examples"],["read_link","Reads a symbolic link, returning the file that the link points to.Platform-specific behaviorThis function currently corresponds to the `readlink` function on Unix and the `CreateFile` function with `FILE_FLAG_OPEN_REPARSE_POINT` and `FILE_FLAG_BACKUP_SEMANTICS` flags on Windows. Note that, this may change in the future.ErrorsThis function will return an error in the following situations, but is not limited to just these cases:`path` is not a symbolic link. `path` does not exist. Examples"],["remove_dir","Removes an existing, empty directory.Platform-specific behaviorThis function currently corresponds to the `rmdir` function on Unix and the `RemoveDirectory` function on Windows. Note that, this may change in the future.ErrorsThis function will return an error in the following situations, but is not limited to just these cases:The user lacks permissions to remove the directory at the provided `path`. The directory isn't empty. Examples"],["remove_dir_all","Removes a directory at this path, after removing all its contents. Use carefully!This function does **not** follow symbolic links and it will simply remove the symbolic link itself.Platform-specific behaviorThis function currently corresponds to `opendir`, `lstat`, `rm` and `rmdir` functions on Unix and the `FindFirstFile`, `GetFileAttributesEx`, `DeleteFile`, and `RemoveDirectory` functions on Windows. Note that, this may change in the future.ErrorsSee `file::remove_file` and `fs::remove_dir`.Examples"],["remove_file","Removes a file from the filesystem.Note that there is no guarantee that the file is immediately deleted (e.g. depending on platform, other open file descriptors may prevent immediate removal).Platform-specific behaviorThis function currently corresponds to the `unlink` function on Unix and the `DeleteFile` function on Windows. Note that, this may change in the future.ErrorsThis function will return an error in the following situations, but is not limited to just these cases:`path` points to a directory. The user lacks permissions to remove the file. Examples"],["rename","Rename a file or directory to a new name.This will not work if the new name is on a different mount point.Platform-specific behaviorThis function currently corresponds to the `rename` function on Unix and the `MoveFileEx` function with the `MOVEFILE_REPLACE_EXISTING` flag on Windows. Note that, this may change in the future.ErrorsThis function will return an error in the following situations, but is not limited to just these cases:`from` does not exist. The user lacks permissions to view contents. `from` and `to` are on separate filesystems. Examples"],["set_permissions","Changes the permissions found on a file or a directory.Platform-specific behaviorThis function currently corresponds to the `chmod` function on Unix and the `SetFileAttributes` function on Windows. Note that, this may change in the future.ErrorsThis function will return an error in the following situations, but is not limited to just these cases:`path` does not exist. The user lacks the permission to change attributes of the file. Examples"],["soft_link","Creates a new symbolic link on the filesystem.The `dst` path will be a symbolic link pointing to the `src` path. On Windows, this will be a file symlink, not a directory symlink; for this reason, the platform-specific `std::os::unix::fs::symlink` and `std::os::windows::fs::{symlink_file, symlink_dir}` should be used instead to make the intent explicit.Examples"],["symlink_metadata","Query the metadata about a file without following symlinks.Platform-specific behaviorThis function currently corresponds to the `lstat` function on Unix and the `GetFileAttributesEx` function on Windows. Note that, this may change in the future.ErrorsThis function will return an error in the following situations, but is not limited to just these cases:The user lacks permissions to perform `metadata` call on `path`. `path` does not exist. Examples"],["walk_dir","Returns an iterator that will recursively walk the directory structure rooted at `path`.The path given will not be iterated over, and this will perform iteration in some top-down order.  The contents of unreadable subdirectories are ignored.The iterator will yield instances of `io::Result<DirEntry>`. New errors may be encountered after an iterator is initially constructed."]],"struct":[["DirBuilder","A builder used to create directories in various manners.This builder also supports platform-specific options."],["DirEntry","Entries returned by the `ReadDir` iterator.An instance of `DirEntry` represents an entry inside of a directory on the filesystem. Each entry can be inspected via methods to learn about the full path or possibly other metadata through per-platform extension traits."],["File","A reference to an open file on the filesystem.An instance of a `File` can be read and/or written depending on what options it was opened with. Files also implement `Seek` to alter the logical cursor that the file contains internally.Examples"],["FileType","An structure representing a type of file with accessors for each file type."],["Metadata","Metadata information about a file.This structure is returned from the `metadata` function or method and represents known metadata about a file such as its permissions, size, modification times, etc."],["OpenOptions","Options and flags which can be used to configure how a file is opened.This builder exposes the ability to configure how a `File` is opened and what operations are permitted on the open file. The `File::open` and `File::create` methods are aliases for commonly used options using this builder.Generally speaking, when using `OpenOptions`, you'll first call `new()`, then chain calls to methods to set each option, then call `open()`, passing the path of the file you're trying to open. This will give you a `io::Result` with a `File` inside that you can further operate on.ExamplesOpening a file to read:Opening a file for both reading and writing, as well as creating it if it doesn't exist:"],["Permissions","Representation of the various permissions on a file.This module only currently provides one bit of information, `readonly`, which is exposed on all currently supported platforms. Unix-specific functionality, such as mode bits, is available through the `os::unix::PermissionsExt` trait."],["ReadDir","Iterator over the entries in a directory.This iterator is returned from the `read_dir` function of this module and will yield instances of `io::Result<DirEntry>`. Through a `DirEntry` information like the entry's path and possibly other metadata can be learned.ErrorsThis `io::Result` will be an `Err` if there's some sort of intermittent IO error during iteration."],["WalkDir","An iterator that recursively walks over the contents of a directory."]]});