initSidebarItems({"enum":[["Entry","A view into a single location in a map, which may be vacant or occupied."]],"struct":[["Drain","HashMap drain iterator."],["HashMap","A hash map implementation which uses linear probing with Robin Hood bucket stealing.The hashes are all keyed by the thread-local random number generator on creation by default. This means that the ordering of the keys is randomized, but makes the tables more resistant to denial-of-service attacks (Hash DoS). This behavior can be overridden with one of the constructors.It is required that the keys implement the `Eq` and `Hash` traits, although this can frequently be achieved by using `#[derive(PartialEq, Eq, Hash)]`. If you implement these yourself, it is important that the following property holds:In other words, if two keys are equal, their hashes must be equal.It is a logic error for a key to be modified in such a way that the key's hash, as determined by the `Hash` trait, or its equality, as determined by the `Eq` trait, changes while it is in the map. This is normally only possible through `Cell`, `RefCell`, global state, I/O, or unsafe code.Relevant papers/articles:Pedro Celis. \"Robin Hood Hashing\" Emmanuel Goossaert. \"Robin Hood hashing\" Emmanuel Goossaert. \"Robin Hood hashing: backward shift deletion\" Examples`HashMap` also implements an `Entry API`, which allows for more complex methods of getting, setting, updating and removing keys and their values:The easiest way to use `HashMap` with a custom type as key is to derive `Eq` and `Hash`. We must also derive `PartialEq`."],["IntoIter","HashMap move iterator."],["Iter","HashMap iterator."],["IterMut","HashMap mutable values iterator."],["Keys","HashMap keys iterator."],["OccupiedEntry","A view into a single occupied location in a HashMap."],["RandomState","`RandomState` is the default state for `HashMap` types.A particular instance `RandomState` will create the same instances of `Hasher`, but the hashers created by two different `RandomState` instances are unlikely to produce the same result for the same values."],["VacantEntry","A view into a single empty location in a HashMap."],["Values","HashMap values iterator."]]});