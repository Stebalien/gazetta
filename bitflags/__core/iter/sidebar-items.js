initSidebarItems({"fn":[["empty","Creates an iterator that yields nothing.ExamplesBasic usage:"],["once","Creates an iterator that yields an element exactly once.This is commonly used to adapt a single value into a `chain()` of other kinds of iteration. Maybe you have an iterator that covers almost everything, but you need an extra special case. Maybe you have a function which works on iterators, but you only need to process one value.ExamplesBasic usage:Chaining together with another iterator. Let's say that we want to iterate over each file of the `.foo` directory, but also a configuration file, `.foorc`:"],["range_inclusive","Returns an iterator over the range [start, stop]."],["repeat","Creates a new iterator that endlessly repeats a single element.The `repeat()` function repeats a single value over and over and over and over and over and üîÅ.Infinite iterators like `repeat()` are often used with adapters like `take()`, in order to make them finite.ExamplesBasic usage:Going finite with `take()`:"]],"struct":[["Chain","An iterator that strings two iterators together.This `struct` is created by the `chain()` method on `Iterator`. See its documentation for more."],["Cloned","An iterator that clones the elements of an underlying iterator.This `struct` is created by the `cloned()` method on `Iterator`. See its documentation for more."],["Cycle","An iterator that repeats endlessly.This `struct` is created by the `cycle()` method on `Iterator`. See its documentation for more."],["Empty","An iterator that yields nothing.This `struct` is created by the `empty()` function. See its documentation for more."],["Enumerate","An iterator that yields the current count and the element during iteration.This `struct` is created by the `enumerate()` method on `Iterator`. See its documentation for more."],["Filter","An iterator that filters the elements of `iter` with `predicate`.This `struct` is created by the `filter()` method on `Iterator`. See its documentation for more."],["FilterMap","An iterator that uses `f` to both filter and map elements from `iter`.This `struct` is created by the `filter_map()` method on `Iterator`. See its documentation for more."],["FlatMap","An iterator that maps each element to an iterator, and yields the elements of the produced iterators.This `struct` is created by the `flat_map()` method on `Iterator`. See its documentation for more."],["Fuse","An iterator that yields `None` forever after the underlying iterator yields `None` once.This `struct` is created by the `fuse()` method on `Iterator`. See its documentation for more."],["Inspect","An iterator that calls a function with a reference to each element before yielding it.This `struct` is created by the `inspect()` method on `Iterator`. See its documentation for more."],["Map","An iterator that maps the values of `iter` with `f`.This `struct` is created by the `map()` method on `Iterator`. See its documentation for more.Notes about side effectsThe `map()` iterator implements `DoubleEndedIterator`, meaning that you can also `map()` backwards:But if your closure has state, iterating backwards may act in a way you do not expect. Let's go through an example. First, in the forward direction:This will print \"('a', 1), ('b', 2), ('c', 3)\".Now consider this twist where we add a call to `rev`. This version will print `('c', 1), ('b', 2), ('a', 3)`. Note that the letters are reversed, but the values of the counter still go in order. This is because `map()` is still being called lazilly on each item, but we are popping items off the back of the vector now, instead of shifting them from the front."],["Once","An iterator that yields an element exactly once.This `struct` is created by the `once()` function. See its documentation for more."],["Peekable","An iterator with a `peek()` that returns an optional reference to the next element.This `struct` is created by the `peekable()` method on `Iterator`. See its documentation for more."],["RangeInclusive","An iterator over the range [start, stop]"],["Repeat","An iterator that repeats an element endlessly.This `struct` is created by the `repeat()` function. See its documentation for more."],["Rev","An double-ended iterator with the direction inverted.This `struct` is created by the `rev()` method on `Iterator`. See its documentation for more."],["Scan","An iterator to maintain state while iterating another iterator.This `struct` is created by the `scan()` method on `Iterator`. See its documentation for more."],["Skip","An iterator that skips over `n` elements of `iter`.This `struct` is created by the `skip()` method on `Iterator`. See its documentation for more."],["SkipWhile","An iterator that rejects elements while `predicate` is true.This `struct` is created by the `skip_while()` method on `Iterator`. See its documentation for more."],["StepBy","An adapter for stepping range iterators by a custom amount.The resulting iterator handles overflow by stopping. The `A` parameter is the type being iterated over, while `R` is the range type (usually one of `std::ops::{Range, RangeFrom}`."],["Take","An iterator that only iterates over the first `n` iterations of `iter`.This `struct` is created by the `take()` method on `Iterator`. See its documentation for more."],["TakeWhile","An iterator that only accepts elements while `predicate` is true.This `struct` is created by the `take_while()` method on `Iterator`. See its documentation for more."],["Zip","An iterator that iterates two other iterators simultaneously.This `struct` is created by the `zip()` method on `Iterator`. See its documentation for more."]],"trait":[["DoubleEndedIterator","An iterator able to yield elements from both ends.Something that implements `DoubleEndedIterator` has one extra capability over something that implements `Iterator`: the ability to also take `Item`s from the back, as well as the front.It is important to note that both back and forth work on the same range, and do not cross: iteration is over when they meet in the middle.In a similar fashion to the `Iterator` protocol, once a `DoubleEndedIterator` returns `None` from a `next_back()`, calling it again may or may not ever return `Some` again. `next()` and `next_back()` are interchangable for this purpose.ExamplesBasic usage:"],["ExactSizeIterator","An iterator that knows its exact length.Many `Iterator`s don't know how many times they will iterate, but some do. If an iterator knows how many times it can iterate, providing access to that information can be useful. For example, if you want to iterate backwards, a good start is to know where the end is.When implementing an `ExactSizeIterator`, You must also implement `Iterator`. When doing so, the implementation of `size_hint()` *must* return the exact size of the iterator.The `len()` method has a default implementation, so you usually shouldn't implement it. However, you may be able to provide a more performant implementation than the default, so overriding it in this case makes sense.ExamplesBasic usage:In the module level docs, we implemented an `Iterator`, `Counter`. Let's implement `ExactSizeIterator` for it as well:"],["Extend","Extend a collection with the contents of an iterator.Iterators produce a series of values, and collections can also be thought of as a series of values. The `Extend` trait bridges this gap, allowing you to extend a collection by including the contents of that iterator.ExamplesBasic usage:Implementing `Extend`:"],["FromIterator","Conversion from an `Iterator`.By implementing `FromIterator` for a type, you define how it will be created from an iterator. This is common for types which describe a collection of some kind.`FromIterator`'s `from_iter()` is rarely called explicitly, and is instead used through `Iterator`'s `collect()` method. See `collect()`'s documentation for more examples.See also: `IntoIterator`.ExamplesBasic usage:Using `collect()` to implicitly use `FromIterator`:Implementing `FromIterator` for your type:"],["IntoIterator","Conversion into an `Iterator`.By implementing `IntoIterator` for a type, you define how it will be converted to an iterator. This is common for types which describe a collection of some kind.One benefit of implementing `IntoIterator` is that your type will work with Rust's `for` loop syntax.See also: `FromIterator`.ExamplesBasic usage:Implementing `IntoIterator` for your type:"],["Iterator","An interface for dealing with iterators.This is the main iterator trait. For more about the concept of iterators generally, please see the module-level documentation. In particular, you may want to know how to implement `Iterator`."],["Step","Objects that can be stepped over in both directions.The `steps_between` function provides a way to efficiently compare two `Step` objects."]]});