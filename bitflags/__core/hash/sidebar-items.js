initSidebarItems({"struct":[["BuildHasherDefault","A structure which implements `BuildHasher` for all `Hasher` types which also implement `Default`.This struct is 0-sized and does not need construction."],["SipHasher","An implementation of SipHash 2-4.See: http://131002.net/siphash/Consider this as a main \"general-purpose\" hash for all hashtables: it runs at good speed (competitive with spooky and city) and permits strong _keyed_ hashing. Key your hashtables from a strong RNG, such as `rand::Rng`.Although the SipHash algorithm is considered to be cryptographically strong, this implementation has not been reviewed for such purposes. As such, all cryptographic uses of this implementation are strongly discouraged."]],"trait":[["BuildHasher","A `BuildHasher` is typically used as a factory for instances of `Hasher` which a `HashMap` can then use to hash keys independently.Note that for each instance of `BuildHasher`, the created hashers should be identical. That is, if the same stream of bytes is fed into each hasher, the same output will also be generated."],["Hash","A hashable type.The `H` type parameter is an abstract hash state that is used by the `Hash` to compute the hash.If you are also implementing `Eq`, there is an additional property that is important:In other words, if two keys are equal, their hashes should also be equal. `HashMap` and `HashSet` both rely on this behavior.This trait can be used with `#[derive]`."],["HashState","Deprecated, renamed to `BuildHasher`"],["Hasher","A trait which represents the ability to hash an arbitrary stream of bytes."]]});