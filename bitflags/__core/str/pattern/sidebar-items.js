initSidebarItems({"enum":[["SearchStep","Result of calling `Searcher::next()` or `ReverseSearcher::next_back()`."]],"struct":[["CharPredicateSearcher","Associated type for `<F as Pattern<'a>>::Searcher`."],["CharSearcher","Associated type for `<char as Pattern<'a>>::Searcher`."],["CharSliceSearcher","Associated type for `<&[char] as Pattern<'a>>::Searcher`."],["StrSearcher","Associated type for `<&str as Pattern<'a>>::Searcher`."]],"trait":[["DoubleEndedSearcher","A marker trait to express that a `ReverseSearcher` can be used for a `DoubleEndedIterator` implementation.For this, the impl of `Searcher` and `ReverseSearcher` need to follow these conditions:All results of `next()` need to be identical to the results of `next_back()` in reverse order. `next()` and `next_back()` need to behave as the two ends of a range of values, that is they can not \"walk past each other\". Examples`char::Searcher` is a `DoubleEndedSearcher` because searching for a `char` only requires looking at one at a time, which behaves the same from both ends.`(&str)::Searcher` is not a `DoubleEndedSearcher` because the pattern `\"aa\"` in the haystack `\"aaa\"` matches as either `\"[aa]a\"` or `\"a[aa]\"`, depending from which side it is searched."],["Pattern","A string pattern.A `Pattern<'a>` expresses that the implementing type can be used as a string pattern for searching in a `&'a str`.For example, both `'a'` and `\"aa\"` are patterns that would match at index `1` in the string `\"baaaab\"`.The trait itself acts as a builder for an associated `Searcher` type, which does the actual work of finding occurrences of the pattern in a string."],["ReverseSearcher","A reverse searcher for a string pattern.This trait provides methods for searching for non-overlapping matches of a pattern starting from the back (right) of a string.It will be implemented by associated `Searcher` types of the `Pattern` trait if the pattern supports searching for it from the back.The index ranges returned by this trait are not required to exactly match those of the forward search in reverse.For the reason why this trait is marked unsafe, see them parent trait `Searcher`."],["Searcher","A searcher for a string pattern.This trait provides methods for searching for non-overlapping matches of a pattern starting from the front (left) of a string.It will be implemented by associated `Searcher` types of the `Pattern` trait.The trait is marked unsafe because the indices returned by the `next()` methods are required to lie on valid utf8 boundaries in the haystack. This enables consumers of this trait to slice the haystack without additional runtime checks."]]});