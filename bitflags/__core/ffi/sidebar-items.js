initSidebarItems({"struct":[["CStr","Representation of a borrowed C string.This dynamically sized type is only safely constructed via a borrowed version of an instance of `CString`. This type can be constructed from a raw C string as well and represents a C string borrowed from another location.Note that this structure is **not** `repr(C)` and is not recommended to be placed in the signatures of FFI functions. Instead safe wrappers of FFI functions may leverage the unsafe `from_ptr` constructor to provide a safe interface to other consumers.ExamplesInspecting a foreign C stringPassing a Rust-originating C stringConverting a foreign C string into a Rust `String`"],["CString","A type representing an owned C-compatible stringThis type serves the primary purpose of being able to safely generate a C-compatible string from a Rust byte slice or vector. An instance of this type is a static guarantee that the underlying bytes contain no interior 0 bytes and the final byte is 0.A `CString` is created from either a byte slice or a byte vector. After being created, a `CString` predominately inherits all of its methods from the `Deref` implementation to `[c_char]`. Note that the underlying array is represented as an array of `c_char` as opposed to `u8`. A `u8` slice can be obtained with the `as_bytes` method.  Slices produced from a `CString` do *not* contain the trailing nul terminator unless otherwise specified.ExamplesSafety`CString` is intended for working with traditional C-style strings (a sequence of non-null bytes terminated by a single null byte); the primary use case for these kinds of strings is interoperating with C-like code. Often you will need to transfer ownership to/from that external code. It is strongly recommended that you thoroughly read through the documentation of `CString` before use, as improper ownership management of `CString` instances can lead to invalid memory accesses, memory leaks, and other memory errors."],["IntoStringError","An error returned from `CString::into_string` to indicate that a UTF-8 error was encountered during the conversion."],["NulError","An error returned from `CString::new` to indicate that a nul byte was found in the vector provided."],["OsStr","Slices into OS strings (see `OsString`)."],["OsString","A type that can represent owned, mutable platform-native strings, but is cheaply interconvertable with Rust strings.The need for this type arises from the fact that:On Unix systems, strings are often arbitrary sequences of non-zero bytes, in many cases interpreted as UTF-8.On Windows, strings are often arbitrary sequences of non-zero 16-bit values, interpreted as UTF-16 when it is valid to do so.In Rust, strings are always valid UTF-8, but may contain zeros.`OsString` and `OsStr` bridge this gap by simultaneously representing Rust and platform-native string values, and in particular allowing a Rust string to be converted into an \"OS\" string with no cost."]]});