initSidebarItems({"enum":[["FpCategory","A classification of floating point numbers.This `enum` is used as the return type for `f32::classify()` and `f64::classify()`. See their documentation for more."]],"mod":[["wrapping",""]],"struct":[["ParseFloatError","An error which can be returned when parsing a float.This error is used as the error type for the `FromStr` implementation for `f32` and `f64`."],["ParseIntError","An error which can be returned when parsing an integer.This error is used as the error type for the `from_str_radix()` functions on the primitive integer types, such as `i8::from_str_radix()`."],["Wrapping","Provides intentionally-wrapped arithmetic on `T`.Operations like `+` on `u32` values is intended to never overflow, and in some debug configurations overflow is detected and results in a panic. While most arithmetic falls into this category, some code explicitly expects and relies upon modular arithmetic (e.g., hashing).Wrapping arithmetic can be achieved either through methods like `wrapping_add`, or through the `Wrapping<T>` type, which says that all standard arithmetic operations on the underlying value are intended to have wrapping semantics."]],"trait":[["One","Types that have a \"one\" value.This trait is intended for use in conjunction with `Mul`, as an identity: `x * T::one() == x`."],["Zero","Types that have a \"zero\" value.This trait is intended for use in conjunction with `Add`, as an identity: `x + T::zero() == x`."]]});