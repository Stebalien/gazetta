initSidebarItems({"constant":[["ALL_EXECUTE",""],["ALL_READ",""],["ALL_RWX",""],["ALL_WRITE",""],["GROUP_EXECUTE",""],["GROUP_READ",""],["GROUP_RWX",""],["GROUP_WRITE",""],["OTHER_EXECUTE",""],["OTHER_READ",""],["OTHER_RWX",""],["OTHER_WRITE",""],["SETGID",""],["SETUID",""],["STICKY_BIT",""],["USER_EXECUTE",""],["USER_READ",""],["USER_RWX",""],["USER_WRITE",""]],"fn":[["symlink","Creates a new symbolic link on the filesystem.The `dst` path will be a symbolic link pointing to the `src` path.NoteOn Windows, you must specify whether a symbolic link points to a file or directory.  Use `os::windows::fs::symlink_file` to create a symbolic link to a file, or `os::windows::fs::symlink_dir` to create a symbolic link to a directory.  Additionally, the process must have `SeCreateSymbolicLinkPrivilege` in order to be able to create a symbolic link.Examples"]],"trait":[["DirBuilderExt","An extension trait for `fs::DirBuilder` for unix-specific options."],["DirEntryExt","Unix-specific extension methods for `fs::DirEntry`"],["FileTypeExt","Add special unix types (block/char device, fifo and socket)"],["MetadataExt",""],["OpenOptionsExt","Unix-specific extensions to `OpenOptions`"],["PermissionsExt","Unix-specific extensions to `Permissions`"]]});