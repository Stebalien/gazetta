initSidebarItems({"enum":[["TryRecvError","This enumeration is the list of the possible reasons that `try_recv` could not return data when called."],["TrySendError","This enumeration is the list of the possible error outcomes for the `SyncSender::try_send` method."]],"fn":[["channel","Creates a new asynchronous channel, returning the sender/receiver halves.All data sent on the sender will become available on the receiver, and no send will block the calling thread (this channel has an \"infinite buffer\").Examples"],["sync_channel","Creates a new synchronous, bounded channel.Like asynchronous channels, the `Receiver` will block until a message becomes available. These channels differ greatly in the semantics of the sender from asynchronous channels, however.This channel has an internal buffer on which messages will be queued. When the internal buffer becomes full, future sends will *block* waiting for the buffer to open up. Note that a buffer size of 0 is valid, in which case this becomes  \"rendezvous channel\" where each send will not return until a recv is paired with it.As with asynchronous channels, all senders will panic in `send` if the `Receiver` has been destroyed.Examples"]],"struct":[["Handle","A handle to a receiver which is currently a member of a `Select` set of receivers.  This handle is used to keep the receiver in the set as well as interact with the underlying receiver."],["IntoIter","An owning iterator over messages on a receiver, this iterator will block whenever `next` is called, waiting for a new message, and `None` will be returned when the corresponding channel has hung up."],["Iter","An iterator over messages on a receiver, this iterator will block whenever `next` is called, waiting for a new message, and `None` will be returned when the corresponding channel has hung up."],["Receiver","The receiving-half of Rust's channel type. This half can only be owned by one thread"],["RecvError","An error returned from the `recv` function on a `Receiver`.The `recv` operation can only fail if the sending half of a channel is disconnected, implying that no further messages will ever be received."],["Select","The \"receiver set\" of the select interface. This structure is used to manage a set of receivers which are being selected over."],["SendError","An error returned from the `send` function on channels.A `send` operation can only fail if the receiving end of a channel is disconnected, implying that the data could never be received. The error contains the data being sent as a payload so it can be recovered."],["Sender","The sending-half of Rust's asynchronous channel type. This half can only be owned by one thread, but it can be cloned to send to other threads."],["SyncSender","The sending-half of Rust's synchronous channel type. This half can only be owned by one thread, but it can be cloned to send to other threads."]]});