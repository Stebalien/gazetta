initSidebarItems({"enum":[["Cow","A clone-on-write smart pointer.The type `Cow` is a smart pointer providing clone-on-write functionality: it can enclose and provide immutable access to borrowed data, and clone the data lazily when mutation or ownership is required. The type is designed to work with general borrowed data via the `Borrow` trait.`Cow` implements `Deref`, which means that you can call non-mutating methods directly on the data it encloses. If mutation is desired, `to_mut` will obtain a mutable reference to an owned value, cloning if necessary.Examples"]],"trait":[["Borrow","A trait for borrowing data.In general, there may be several ways to \"borrow\" a piece of data.  The typical ways of borrowing a type `T` are `&T` (a shared borrow) and `&mut T` (a mutable borrow). But types like `Vec<T>` provide additional kinds of borrows: the borrowed slices `&[T]` and `&mut [T]`.When writing generic code, it is often desirable to abstract over all ways of borrowing data from a given type. That is the role of the `Borrow` trait: if `T: Borrow<U>`, then `&U` can be borrowed from `&T`.  A given type can be borrowed as multiple different types. In particular, `Vec<T>: Borrow<Vec<T>>` and `Vec<T>: Borrow<[T]>`.If you are implementing `Borrow` and both `Self` and `Borrowed` implement `Hash`, `Eq`, and/or `Ord`, they must produce the same result.`Borrow` is very similar to, but different than, `AsRef`. See the book for more."],["BorrowMut","A trait for mutably borrowing data.Similar to `Borrow`, but for mutable borrows."],["IntoCow","Trait for moving into a `Cow`."],["ToOwned","A generalization of `Clone` to borrowed data.Some types make it possible to go from borrowed to owned, usually by implementing the `Clone` trait. But `Clone` works only for going from `&T` to `T`. The `ToOwned` trait generalizes `Clone` to construct owned data from any borrow of a given type."]]});