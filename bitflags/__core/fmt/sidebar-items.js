initSidebarItems({"fn":[["format","The format function takes a precompiled format string and a list of arguments, to return the resulting formatted string.Argumentsargs - a structure of arguments generated via the `format_args!` macro. Examples"],["radix","Constructs a radix formatter in the range of `2..36`.Examples"],["write","The `write` function takes an output stream, a precompiled format string, and a list of arguments. The arguments will be formatted according to the specified format string into the output stream provided.Argumentsoutput - the buffer to write output to args - the precompiled arguments generated by `format_args!`"]],"struct":[["Arguments","This structure represents a safely precompiled version of a format string and its arguments. This cannot be generated at runtime because it cannot safely be done so, so no constructors are given and the fields are private to prevent modification.The `format_args!` macro will safely create an instance of this structure and pass it to a function or closure, passed as the first argument. The macro validates the format string at compile-time so usage of the `write` and `format` functions can be safely performed."],["DebugList","A struct to help with `fmt::Debug` implementations.Constructed by the `Formatter::debug_list` method."],["DebugMap","A struct to help with `fmt::Debug` implementations.Constructed by the `Formatter::debug_map` method."],["DebugSet","A struct to help with `fmt::Debug` implementations.Constructed by the `Formatter::debug_set` method."],["DebugStruct","A struct to help with `fmt::Debug` implementations.Constructed by the `Formatter::debug_struct` method."],["DebugTuple","A struct to help with `fmt::Debug` implementations.Constructed by the `Formatter::debug_tuple` method."],["Error","The error type which is returned from formatting a message into a stream.This type does not support transmission of an error other than that an error occurred. Any extra information must be arranged to be transmitted through some other means."],["Formatter","A struct to represent both where to emit formatting strings to and how they should be formatted. A mutable version of this is passed to all formatting traits."],["Radix","A radix with in the range of `2..36`."],["RadixFmt","A helper type for formatting radixes."]],"trait":[["Binary","Format trait for the `b` character.The `Binary` trait should format its output as a number in binary.The alternate flag, `#`, adds a `0b` in front of the output.For more information on formatters, see the module-level documentation.ExamplesBasic usage with `i32`:Implementing `Binary` on a type:"],["Debug","Format trait for the `?` character.`Debug` should format the output in a programmer-facing, debugging context.Generally speaking, you should just `derive` a `Debug` implementation.When used with the alternate format specifier `#?`, the output is pretty-printed.For more information on formatters, see the module-level documentation.This trait can be used with `#[derive]`.ExamplesDeriving an implementation:Manually implementing:This outputs:There are a number of `debug_*` methods on `Formatter` to help you with manual implementations, such as `debug_struct`.`Debug` implementations using either `derive` or the debug builder API on `Formatter` support pretty printing using the alternate flag: `{:#?}`.Pretty printing with `#?`:This outputs:"],["Display","Format trait for an empty format, `{}`.`Display` is similar to `Debug`, but `Display` is for user-facing output, and so cannot be derived.For more information on formatters, see the module-level documentation.ExamplesImplementing `Display` on a type:"],["LowerExp","Format trait for the `e` character.The `LowerExp` trait should format its output in scientific notation with a lower-case `e`.For more information on formatters, see the module-level documentation.ExamplesBasic usage with `i32`:Implementing `LowerExp` on a type:"],["LowerHex","Format trait for the `x` character.The `LowerHex` trait should format its output as a number in hexadecimal, with `a` through `f` in lower case.The alternate flag, `#`, adds a `0x` in front of the output.For more information on formatters, see the module-level documentation.ExamplesBasic usage with `i32`:Implementing `LowerHex` on a type:"],["Octal","Format trait for the `o` character.The `Octal` trait should format its output as a number in base-8.The alternate flag, `#`, adds a `0o` in front of the output.For more information on formatters, see the module-level documentation.ExamplesBasic usage with `i32`:Implementing `Octal` on a type:"],["Pointer","Format trait for the `p` character.The `Pointer` trait should format its output as a memory location. This is commonly presented as hexadecimal.For more information on formatters, see the module-level documentation.ExamplesBasic usage with `&i32`:Implementing `Pointer` on a type:"],["UpperExp","Format trait for the `E` character.The `UpperExp` trait should format its output in scientific notation with an upper-case `E`.For more information on formatters, see the module-level documentation.ExamplesBasic usage with `f32`:Implementing `UpperExp` on a type:"],["UpperHex","Format trait for the `X` character.The `UpperHex` trait should format its output as a number in hexadecimal, with `A` through `F` in upper case.The alternate flag, `#`, adds a `0x` in front of the output.For more information on formatters, see the module-level documentation.ExamplesBasic usage with `i32`:Implementing `UpperHex` on a type:"],["Write","A collection of methods that are required to format a message into a stream.This trait is the type which this modules requires when formatting information. This is similar to the standard library's `io::Write` trait, but it is only intended for use in libcore.This trait should generally not be implemented by consumers of the standard library. The `write!` macro accepts an instance of `io::Write`, and the `io::Write` trait is favored over implementing this trait."]],"type":[["Result",""]]});