initSidebarItems({"constant":[["MAX","The highest valid code point a `char` can have.A `char` is a Unicode Scalar Value, which means that it is a Code Point, but only ones within a certain range. `MAX` is the highest valid code point that's a valid Unicode Scalar Value."],["REPLACEMENT_CHARACTER","`U+FFFD REPLACEMENT CHARACTER` (ï¿½) is used in Unicode to represent a decoding error. It can occur, for example, when giving ill-formed UTF-8 bytes to `String::from_utf8_lossy`."],["UNICODE_VERSION","The version of Unicode that the unicode parts of `CharExt` and `UnicodeStrPrelude` traits are based on."]],"fn":[["decode_utf16","Create an iterator over the UTF-16 encoded code points in `iterable`, returning unpaired surrogates as `Err`s.ExamplesBasic usage:A lossy decoder can be obtained by replacing `Err` results with the replacement character:"],["from_digit","Converts a digit in the given radix to a `char`.A 'radix' here is sometimes also called a 'base'. A radix of two indicates a binary number, a radix of ten, decimal, and a radix of sixteen, hexadecimal, to give some common values. Arbitrary radicum are supported.`from_digit()` will return `None` if the input is not a digit in the given radix.PanicsPanics if given a radix larger than 36.ExamplesBasic usage:Returning `None` when the input is not a digit:Passing a large radix, causing a panic:"],["from_u32","Converts a `u32` to a `char`.Note that all `char`s are valid `u32`s, and can be casted to one with `as`:However, the reverse is not true: not all valid `u32`s are valid `char`s. `from_u32()` will return `None` if the input is not a valid value for a `char`.For an unsafe version of this function which ignores these checks, see `from_u32_unchecked()`.ExamplesBasic usage:Returning `None` when the input is not a valid `char`:"],["from_u32_unchecked","Converts a `u32` to a `char`, ignoring validity.Note that all `char`s are valid `u32`s, and can be casted to one with `as`:However, the reverse is not true: not all valid `u32`s are valid `char`s. `from_u32_unchecked()` will ignore this, and blindly cast to `char`, possibly creating an invalid one.SafetyThis function is unsafe, as it may construct invalid `char` values.For a safe version of this function, see the `from_u32()` function.ExamplesBasic usage:"]],"struct":[["DecodeUtf16","An iterator that decodes UTF-16 encoded code points from an iterator of `u16`s."],["EscapeDefault","An iterator that yields the literal escape code of a `char`.This `struct` is created by the `escape_default()` method on `char`. See its documentation for more."],["EscapeUnicode","Returns an iterator that yields the hexadecimal Unicode escape of a character, as `char`s.This `struct` is created by the `escape_unicode()` method on `char`. See its documentation for more."],["ToLowercase","Returns an iterator that yields the lowercase equivalent of a `char`.This `struct` is created by the `to_lowercase()` method on `char`. See its documentation for more."],["ToUppercase","Returns an iterator that yields the uppercase equivalent of a `char`.This `struct` is created by the `to_uppercase()` method on `char`. See its documentation for more."]]});