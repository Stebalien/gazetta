initSidebarItems({"trait":[["BufRead","A `BufRead` is a type of `Read`er which has an internal buffer, allowing it to perform extra ways of reading.For example, reading line-by-line is inefficient without using a buffer, so if you want to read by line, you'll need `BufRead`, which includes a `read_line()` method as well as a `lines()` iterator.ExamplesA locked standard input implements `BufRead`:If you have something that implements `Read`, you can use the `BufReader` type to turn it into a `BufRead`.For example, `File` implements `Read`, but not `BufRead`. `BufReader` to the rescue!"],["Read","The `Read` trait allows for reading bytes from a source.Implementors of the `Read` trait are sometimes called 'readers'.Readers are defined by one required method, `read()`. Each call to `read` will attempt to pull bytes from this source into a provided buffer. A number of other methods are implemented in terms of `read()`, giving implementors a number of ways to read bytes while only needing to implement a single method.Readers are intended to be composable with one another. Many implementors throughout `std::io` take and provide types which implement the `Read` trait.Please note that each call to `read` may involve a system call, and therefore, using something that implements `BufRead`, such as `BufReader`, will be more efficient.Examples`File`s implement `Read`:"],["Seek","The `Seek` trait provides a cursor which can be moved within a stream of bytes.The stream typically has a fixed size, allowing seeking relative to either end or the current offset.Examples`File`s implement `Seek`:"],["Write","A trait for objects which are byte-oriented sinks.Implementors of the `Write` trait are sometimes called 'writers'.Writers are defined by two required methods, `write()` and `flush()`:The `write()` method will attempt to write some data into the object, returning how many bytes were successfully written.The `flush()` method is useful for adaptors and explicit buffers themselves for ensuring that all buffered data has been pushed out to the 'true sink'.Writers are intended to be composable with one another. Many implementors throughout `std::io` take and provide types which implement the `Write` trait.Examples"]]});