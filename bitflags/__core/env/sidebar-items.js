initSidebarItems({"enum":[["VarError","Possible errors from the `env::var` method."]],"fn":[["args","Returns the arguments which this program was started with (normally passed via the command line).The first element is traditionally the path to the executable, but it can be set to arbitrary text, and may not even exist. This means this property should not be relied upon for security purposes.PanicsThe returned iterator will panic during iteration if any argument to the process is not valid unicode. If this is not desired, use the `args_os` function instead.Examples"],["args_os","Returns the arguments which this program was started with (normally passed via the command line).The first element is traditionally the path to the executable, but it can be set to arbitrary text, and it may not even exist, so this property should not be relied upon for security purposes.Examples"],["current_dir","Returns the current working directory as a `PathBuf`.ErrorsReturns an `Err` if the current working directory value is invalid. Possible cases:Current directory does not exist. There are insufficient permissions to access the current directory. Examples"],["current_exe","Returns the full filesystem path to the current running executable.The path returned is not necessarily a \"real path\" to the executable as there may be intermediate symlinks.ErrorsAcquiring the path to the current executable is a platform-specific operation that can fail for a good number of reasons. Some errors can include, but not be limited to, filesystem operations failing or general syscall failures.Examples"],["home_dir","Returns the path to the current user's home directory if known.UnixReturns the value of the 'HOME' environment variable if it is set and not equal to the empty string. Otherwise, it tries to determine the home directory by invoking the `getpwuid_r` function on the UID of the current user.WindowsReturns the value of the 'HOME' environment variable if it is set and not equal to the empty string. Otherwise, returns the value of the 'USERPROFILE' environment variable if it is set and not equal to the empty string. If both do not exist, `GetUserProfileDirectory` is used to return the appropriate path.Examples"],["join_paths","Joins a collection of `Path`s appropriately for the `PATH` environment variable.Returns an `OsString` on success.Returns an `Err` (containing an error message) if one of the input `Path`s contains an invalid character for constructing the `PATH` variable (a double quote on Windows or a colon on Unix).Examples"],["remove_var","Removes an environment variable from the environment of the currently running process.Note that while concurrent access to environment variables is safe in Rust, some platforms only expose inherently unsafe non-threadsafe APIs for inspecting the environment. As a result extra care needs to be taken when auditing calls to unsafe external FFI functions to ensure that any external environment accesses are properly synchronized with accesses in Rust.Discussion of this unsafety on Unix may be found in:Austin Group Bugzilla GNU C library Bugzilla PanicsThis function may panic if `key` is empty, contains an ASCII equals sign `'='` or the NUL character `'\\0'`, or when the value contains the NUL character.Examples"],["set_current_dir","Changes the current working directory to the specified path, returning whether the change was completed successfully or not.Examples"],["set_var","Sets the environment variable `k` to the value `v` for the currently running process.Note that while concurrent access to environment variables is safe in Rust, some platforms only expose inherently unsafe non-threadsafe APIs for inspecting the environment. As a result extra care needs to be taken when auditing calls to unsafe external FFI functions to ensure that any external environment accesses are properly synchronized with accesses in Rust.Discussion of this unsafety on Unix may be found in:Austin Group Bugzilla GNU C library Bugzilla PanicsThis function may panic if `key` is empty, contains an ASCII equals sign `'='` or the NUL character `'\\0'`, or when the value contains the NUL character.Examples"],["split_paths","Parses input according to platform conventions for the `PATH` environment variable.Returns an iterator over the paths contained in `unparsed`.Examples"],["temp_dir","Returns the path to a temporary directory.On Unix, returns the value of the 'TMPDIR' environment variable if it is set, otherwise for non-Android it returns '/tmp'. If Android, since there is no global temporary folder (it is usually allocated per-app), we return '/data/local/tmp'.On Windows, returns the value of, in order, the 'TMP', 'TEMP', 'USERPROFILE' environment variable  if any are set and not the empty string. Otherwise, tmpdir returns the path to the Windows directory. This behavior is identical to that of GetTempPath, which this function uses internally."],["var","Fetches the environment variable `key` from the current process.The returned result is `Ok(s)` if the environment variable is present and is valid unicode. If the environment variable is not present, or it is not valid unicode, then `Err` will be returned.Examples"],["var_os","Fetches the environment variable `key` from the current process, returning None if the variable isn't set.Examples"],["vars","Returns an iterator of (variable, value) pairs of strings, for all the environment variables of the current process.The returned iterator contains a snapshot of the process's environment variables at the time of this invocation, modifications to environment variables afterwards will not be reflected in the returned iterator.PanicsWhile iterating, the returned iterator will panic if any key or value in the environment is not valid unicode. If this is not desired, consider using the `env::vars_os` function.Examples"],["vars_os","Returns an iterator of (variable, value) pairs of OS strings, for all the environment variables of the current process.The returned iterator contains a snapshot of the process's environment variables at the time of this invocation, modifications to environment variables afterwards will not be reflected in the returned iterator.Examples"]],"mod":[["consts","Constants associated with the current target"]],"struct":[["Args","An iterator over the arguments of a process, yielding a `String` value for each argument.This structure is created through the `std::env::args` method."],["ArgsOs","An iterator over the arguments of a process, yielding an `OsString` value for each argument.This structure is created through the `std::env::args_os` method."],["JoinPathsError","Error type returned from `std::env::join_paths` when paths fail to be joined."],["SplitPaths","An iterator over `PathBuf` instances for parsing an environment variable according to platform-specific conventions.This structure is returned from `std::env::split_paths`."],["Vars","An iterator over a snapshot of the environment variables of this process.This iterator is created through `std::env::vars()` and yields `(String, String)` pairs."],["VarsOs","An iterator over a snapshot of the environment variables of this process.This iterator is created through `std::env::vars_os()` and yields `(OsString, OsString)` pairs."]]});