initSidebarItems({"enum":[["Host","The host name of an URL."],["Origin","The origin of the URL"],["ParseError","Errors that can occur during parsing."],["SchemeData","The components of the URL whose representation depends on where the scheme is *relative*."],["SchemeType","Determines the behavior of the URL parser for a given scheme."]],"fn":[["parse_path","Parse `input` as a “standalone” URL path, with an optional query string and fragment identifier.This is typically found in the start line of an HTTP header.Note that while the start line has no fragment identifier in the HTTP RFC, servers typically parse it and ignore it (rather than having it be part of the path or query string.)On success, return `(path, query_string, fragment_identifier)`The query string returned by `url::parse_path` can be decoded with `url::form_urlencoded::parse`."],["whatwg_scheme_type_mapper","http://url.spec.whatwg.org/#relative-scheme"]],"mod":[["form_urlencoded","Parser and serializer for the `application/x-www-form-urlencoded` format, as used by HTML forms.Converts between a string (such as an URL’s query string) and a sequence of (name, value) pairs."],["format","Formatting utilities for URLs.These formatters can be used to coerce various URL parts into strings.You can use `<formatter>.to_string()`, as the formatters implement `fmt::Display`."],["percent_encoding",""],["punycode","Punycode (RFC 3492) implementation.Since Punycode fundamentally works on unicode code points, `encode` and `decode` take and return slices and vectors of `char`. `encode_str` and `decode_to_string` provide convenience wrappers that convert from and to Rust’s UTF-8 based `str` and `String` types."],["urlutils","These methods are not meant for use in Rust code, only to help implement the JavaScript URLUtils API: http://url.spec.whatwg.org/#urlutils"]],"struct":[["Ipv6Address","A 128 bit IPv6 address"],["OpaqueOrigin","Opaque identifier for URLs that have file or other schemes"],["RelativeSchemeData","Components for URLs in a *relative* scheme such as HTTP."],["Url","The parsed representation of an absolute URL."],["UrlParser","A set of optional parameters for URL parsing."]],"type":[["ErrorHandler","This is called on non-fatal parse errors.The handler can choose to continue or abort parsing by returning Ok() or Err(), respectively. See the `UrlParser::error_handler` method.FIXME: make this a by-ref closure when that’s supported."],["ParseResult",""]]});