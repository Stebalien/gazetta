initSidebarItems({"enum":[["Weekday","The day of week (DOW).The order of the days of week depends on the context. One should prefer `*_from_monday` or `*_from_sunday` methods to get the correct result."]],"mod":[["date","ISO 8601 calendar date with time zone."],["datetime","ISO 8601 date and time with time zone."],["duration","ISO 8601 duration.This used to be a part of rust-chrono, but has been subsequently merged into Rust's standard library."],["format","Formatting utilities for date and time."],["naive","Date and time types which do not concern about the timezones.They are primarily building blocks for other types (e.g. `TimeZone`), but can be also used for the simpler date and time handling."],["offset","The time zone, which calculates offsets from the local time to UTC.There are three operations provided by the `TimeZone` trait:Converting the local `NaiveDateTime` to `DateTime<Tz>` Converting the UTC `NaiveDateTime` to `DateTime<Tz>` Converting `DateTime<Tz>` to the local `NaiveDateTime` 1 is used for constructors. 2 is used for the `with_timezone` method of date and time types. 3 is used for other methods, e.g. `year()` or `format()`, and provided by an associated type which implements `Offset` (which then passed to `TimeZone` for actual implementations). Technically speaking `TimeZone` has a total knowledge about given timescale, but `Offset` is used as a cache to avoid the repeated conversion and provides implementations for 1 and 3. An `TimeZone` instance can be reconstructed from the corresponding `Offset` instance."]],"struct":[["Duration","ISO 8601 time duration with nanosecond precision. This also allows for the negative duration; see individual methods for details."]],"trait":[["Datelike","The common set of methods for date component."],["Timelike","The common set of methods for time component."]]});